###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         08/May/2015  15:58:09 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\Source\ #
#                          SampleApp.c                                        #
#    Command line       =  -f E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ #
#                          ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg         #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK         #
#                          -DBLINK_LEDS) -f E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3. #
#                          ¸ß¼¶Æª-zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ #
#                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConf #
#                          ig.cfg (-DSECURE=0 -DZG_SECURE_DYNAMIC=0           #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\Source\ #
#                          SampleApp.c -D ZIGBEEPRO -D ZTOOL_P1 -D MT_TASK    #
#                          -D MT_SYS_FUNC -D MT_ZDO_FUNC -D                   #
#                          LCD_SUPPORTED=DEBUG -lC E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä #
#                          ½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞ #
#                          ÏßÍ¨Ñ¶\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\RouterEB-Pro\List\ -lA   #
#                          E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\RouterEB-Pro\List\ --diag_suppress Pe001,Pa010   #
#                          -o E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ #
#                          ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\RouterEB-Pro\Obj\ -e --debug --core=plain     #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä #
#                          ½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞ #
#                          ÏßÍ¨Ñ¶\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\ -I                      #
#                          E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\SOURCE\ -I E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ #
#                          ß¼¶Æª-zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I      #
#                          E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\MT\ -I                 #
#                          E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I        #
#                          E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\   #
#                          -I E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ #
#                          ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I  #
#                          E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I       #
#                          E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\STACK\AF\ -I           #
#                          E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\STACK\NWK\ -I          #
#                          E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\STACK\SEC\ -I          #
#                          E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I         #
#                          E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\STACK\SYS\ -I          #
#                          E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I          #
#                          E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I           #
#                          E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\ZMAC\ -I               #
#                          E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I     #
#                          E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I     #
#                          E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I        #
#                          E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I     #
#                          E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\   #
#                          -I E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ #
#                          ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04 #
#                          \SINGLE_CHIP\ -Ohz --require_prototypes            #
#    List file          =  E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\RouterEB-Pro\List\SampleApp.lst                  #
#    Object file        =  E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­Òé #
#                          Õ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\RouterEB-Pro\Obj\SampleApp.r51                   #
#                                                                             #
#                                                                             #
###############################################################################

E:\zigbee¿ª·¢°åv3\´úÂë¼°Æä½Ì³Ì\3.¸ß¼¶Æª-zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\5.µã²¥Í¨Ñ¶-ÎÞÏßÍ¨Ñ¶\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          
     78          /*********************************************************************
     79           * MACROS
     80           */
     81          
     82          /*********************************************************************
     83           * CONSTANTS
     84           */
     85          
     86          /*********************************************************************
     87           * TYPEDEFS
     88           */
     89          
     90          /*********************************************************************
     91           * GLOBAL VARIABLES
     92           */
     93          
     94          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     95          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     96          {
     97            SAMPLEAPP_PERIODIC_CLUSTERID,
     98            SAMPLEAPP_FLASH_CLUSTERID
     99          };
    100          

   \                                 In  segment XDATA_ROM_C, align 1
    101          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    102          {
    103            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    104            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    105            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    106            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    107            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    108            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    109            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    110            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    111            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    112          };
    113          
    114          // This is the Endpoint/Interface description.  It is defined here, but
    115          // filled-in in SampleApp_Init().  Another way to go would be to fill
    116          // in the structure here and make it a "const" (in code space).  The
    117          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    119          
    120          /*********************************************************************
    121           * EXTERNAL VARIABLES
    122           */
    123          
    124          /*********************************************************************
    125           * EXTERNAL FUNCTIONS
    126           */
    127          
    128          /*********************************************************************
    129           * LOCAL VARIABLES
    130           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    132                                    // This variable will be received when
    133                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    146          
    147          /*********************************************************************
    148           * LOCAL FUNCTIONS
    149           */
    150          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    151          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    152          void SampleApp_SendPeriodicMessage( void );
    153          void SampleApp_SendFlashMessage( uint16 flashTime );
    154          void SampleApp_Send_P2P_Message(void);
    155          /*********************************************************************
    156           * NETWORK LAYER CALLBACKS
    157           */
    158          
    159          /*********************************************************************
    160           * PUBLIC FUNCTIONS
    161           */
    162          
    163          /*********************************************************************
    164           * @fn      SampleApp_Init
    165           *
    166           * @brief   Initialization function for the Generic App Task.
    167           *          This is called during initialization and should contain
    168           *          any application specific initialization (ie. hardware
    169           *          initialization/setup, table initialization, power up
    170           *          notificaiton ... ).
    171           *
    172           * @param   task_id - the ID assigned by OSAL.  This ID should be
    173           *                    used to send messages and set timers.
    174           *
    175           * @return  none
    176           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    177          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    178          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    179            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    180            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    181            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    182            
    183            MT_UartInit();                  //´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    184            MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    185            
    186            // Device hardware initialization can be added here or in main() (Zmain.c).
    187            // If the hardware is application specific - add it here.
    188            // If the hardware is other parts of the device add it in main().
    189          
    190           #if defined ( BUILD_ALL_DEVICES )
    191            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    192            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    193            // together - if they are - we will start up a coordinator. Otherwise,
    194            // the device will start as a router.
    195            if ( readCoordinatorJumper() )
    196              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    197            else
    198              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    199          #endif // BUILD_ALL_DEVICES
    200          
    201          #if defined ( HOLD_AUTO_START )
    202            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    203            //  from starting the device and wait for the application to
    204            //  start the device.
    205            ZDOInitDevice(0);
    206          #endif
    207          
    208            // Setup for the periodic message's destination address
    209            // Broadcast to everyone
    210            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//¹ã²¥
   \   00001E   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000021   740F         MOV     A,#0xf
   \   000023   F0           MOVX    @DPTR,A
    211            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000024   A3           INC     DPTR
   \   000025   7414         MOV     A,#0x14
   \   000027   F0           MOVX    @DPTR,A
    212            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000028   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00002B   74FF         MOV     A,#-0x1
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   F0           MOVX    @DPTR,A
    213          
    214            // Setup for the flash command's destination address - Group 1
    215            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;//×é²¥
   \   000030   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000033   7401         MOV     A,#0x1
   \   000035   F0           MOVX    @DPTR,A
    216            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000036   A3           INC     DPTR
   \   000037   7414         MOV     A,#0x14
   \   000039   F0           MOVX    @DPTR,A
    217            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00003A   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00003D   7401         MOV     A,#0x1
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   E4           CLR     A
   \   000042   F0           MOVX    @DPTR,A
    218            
    219            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
   \   000043   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   000046   7402         MOV     A,#0x2
   \   000048   F0           MOVX    @DPTR,A
    220            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   000049   A3           INC     DPTR
   \   00004A   7414         MOV     A,#0x14
   \   00004C   F0           MOVX    @DPTR,A
    221            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷
   \   00004D   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   000050   E4           CLR     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   F0           MOVX    @DPTR,A
    222          
    223            // Fill out the endpoint description.
    224            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000054   90....       MOV     DPTR,#SampleApp_epDesc
   \   000057   7414         MOV     A,#0x14
   \   000059   F0           MOVX    @DPTR,A
    225            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00005A   A3           INC     DPTR
   \   00005B   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000061   F0           MOVX    @DPTR,A
    226            SampleApp_epDesc.simpleDesc
    227                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000062   A3           INC     DPTR
   \   000063   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000069   F0           MOVX    @DPTR,A
    228            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00006A   A3           INC     DPTR
   \   00006B   E4           CLR     A
   \   00006C   F0           MOVX    @DPTR,A
    229          
    230            // Register the endpoint description with the AF
    231            afRegister( &SampleApp_epDesc );
   \   00006D                ; Setup parameters for call to function afRegister
   \   00006D   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00006F   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000071   12....       LCALL   ??afRegister?relay
    232          
    233            // Register for all key events - This app will handle all key events
    234            RegisterForKeys( SampleApp_TaskID );
   \   000074                ; Setup parameters for call to function RegisterForKeys
   \   000074   90....       MOV     DPTR,#SampleApp_TaskID
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F9           MOV     R1,A
   \   000079   12....       LCALL   ??RegisterForKeys?relay
    235          
    236            // By default, all devices start out in Group 1
    237            SampleApp_Group.ID = 0x0001;
   \   00007C   90....       MOV     DPTR,#SampleApp_Group
   \   00007F   7401         MOV     A,#0x1
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   E4           CLR     A
   \   000084   F0           MOVX    @DPTR,A
    238            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   000085                ; Setup parameters for call to function osal_memcpy
   \   000085   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   000088   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00008B   F5..         MOV     ?V0 + 2,A
   \   00008D   78..         MOV     R0,#?V0 + 0
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000092   7C07         MOV     R4,#0x7
   \   000094   7D00         MOV     R5,#0x0
   \   000096   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   000098   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   00009A   12....       LCALL   ??osal_memcpy?relay
   \   00009D   7403         MOV     A,#0x3
   \   00009F   12....       LCALL   ?DEALLOC_XSTACK8
    239            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000A2                ; Setup parameters for call to function aps_AddGroup
   \   0000A2   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000A4   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000A6   7914         MOV     R1,#0x14
   \   0000A8   12....       LCALL   ??aps_AddGroup?relay
    240          
    241          #if defined ( LCD_SUPPORTED )
    242            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000AB                ; Setup parameters for call to function HalLcdWriteString
   \   0000AB   7901         MOV     R1,#0x1
   \   0000AD   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000AF   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000B1   12....       LCALL   ??HalLcdWriteString?relay
    243          #endif
    244          }
   \   0000B4   7F03         MOV     R7,#0x3
   \   0000B6   02....       LJMP    ?BANKED_LEAVE_XDATA
    245          
    246          /*********************************************************************
    247           * @fn      SampleApp_ProcessEvent
    248           *
    249           * @brief   Generic Application Task event processor.  This function
    250           *          is called to process all events for the task.  Events
    251           *          include timers, messages and any other user defined events.
    252           *
    253           * @param   task_id  - The OSAL assigned task ID.
    254           * @param   events - events to process.  This is a bit map and can
    255           *                   contain more than one event.
    256           *
    257           * @return  none
    258           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    259          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    260          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    261            afIncomingMSGPacket_t *MSGpkt;
    262            (void)task_id;  // Intentionally unreferenced parameter
    263          
    264            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    265            {
    266              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    267              while ( MSGpkt )
    268              {
    269                switch ( MSGpkt->hdr.event )
    270                {
    271                  // Received when a key is pressed
    272                  case KEY_CHANGE:
    273                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    274                    break;
    275          
    276                  // Received when a messages is received (OTA) for this endpoint
    277                  case AF_INCOMING_MSG_CMD:
    278                    SampleApp_MessageMSGCB( MSGpkt );
    279                    break;
    280          
    281                  // Received whenever the device changes state in the network
    282                  case ZDO_STATE_CHANGE:
    283                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    284                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    285                           (SampleApp_NwkState == DEV_ROUTER)
    286                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    287                    {
    288                      // Start sending the periodic message in a regular interval.
    289                      osal_start_timerEx( SampleApp_TaskID,
    290                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    291                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CB8         MOV     R4,#-0x48
   \   000020   7D0B         MOV     R5,#0xb
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    292                    }
    293                    else
    294                    {
    295                      // Device is no longer in the network
    296                    }
    297                    break;
    298          
    299                  default:
    300                    break;
    301                }
    302          
    303                // Release the memory
    304                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    305          
    306                // Next - if one is available
    307                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    308              }
    309          
    310              // return unprocessed events
    311              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    312            }
    313          
    314            // Send a message out - This event is generated by a timer
    315            //  (setup in SampleApp_Init()).
    316            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    317            {
    318              // Send the periodic message
    319              //SampleApp_SendPeriodicMessage();
    320              SampleApp_Send_P2P_Message();
   \   000086                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   000086   12....       LCALL   ??SampleApp_Send_P2P_Message?relay
    321          
    322              // Setup to send message again in normal period (+ a little jitter)
    323              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    324                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24B8         ADD     A,#-0x48
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   340B         ADDC    A,#0xb
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    325          
    326              // return unprocessed events
    327              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    328            }
    329          
    330            // Discard unknown events
    331            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB                REQUIRE ?Subroutine0
   \   0000AB                ; // Fall through to label ?Subroutine0
    332          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    333          
    334          /*********************************************************************
    335           * Event Generation Functions
    336           */
    337          /*********************************************************************
    338           * @fn      SampleApp_HandleKeys
    339           *
    340           * @brief   Handles all key events for this device.
    341           *
    342           * @param   shift - true if in shift/alt.
    343           * @param   keys - bit field for key events. Valid entries:
    344           *                 HAL_KEY_SW_2
    345           *                 HAL_KEY_SW_1
    346           *
    347           * @return  none
    348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    349          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    350          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    351            (void)shift;  // Intentionally unreferenced parameter
    352            
    353            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    354            {
    355              /* This key sends the Flash Command is sent to Group 1.
    356               * This device will not receive the Flash Command from this
    357               * device (even if it belongs to group 1).
    358               */
    359              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    360            }
    361          
    362            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    363            {
    364              /* The Flashr Command is sent to Group 1.
    365               * This key toggles this device in and out of group 1.
    366               * If this device doesn't belong to group 1, this application
    367               * will not receive the Flash command sent to group 1.
    368               */
    369              aps_Group_t *grp;
    370              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    371              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    372              {
    373                // Remove from the group
    374                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    375              }
    376              else
    377              {
    378                // Add to the flash group
    379                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    380              }
    381            }
    382          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   02....       LJMP    ??Subroutine2_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine2_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    383          
    384          /*********************************************************************
    385           * LOCAL FUNCTIONS
    386           */
    387          
    388          /*********************************************************************
    389           * @fn      SampleApp_MessageMSGCB
    390           *
    391           * @brief   Data message processor callback.  This function processes
    392           *          any incoming data - probably from other devices.  So, based
    393           *          on cluster ID, perform the intended action.
    394           *
    395           * @param   none
    396           *
    397           * @return  none
    398           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    399          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    400          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    401            uint16 flashTime;
    402          
    403            switch ( pkt->clusterId )
   \   000009   EE           MOV     A,R6
   \   00000A   2421         ADD     A,#0x21
   \   00000C   F5..         MOV     ?V0 + 0,A
   \   00000E   EF           MOV     A,R7
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F5..         MOV     ?V0 + 1,A
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 2,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 3,A
   \   000022   78..         MOV     R0,#?V0 + 2
   \   000024   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000027   0200         DW        2
   \   000029   02           DB        2
   \   00002A   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00002C   ....         DW        ??SampleApp_MessageMSGCB_1
   \   00002E   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000030   ....         DW        ??SampleApp_MessageMSGCB_2
    404            {
    405              case SAMPLEAPP_P2P_CLUSTERID:
    406                HalUARTWrite(0, "Rx:", 3);       //ÌáÊ¾½ÓÊÕµ½Êý¾Ý
   \                     ??SampleApp_MessageMSGCB_2:
   \   000032                ; Setup parameters for call to function HalUARTWrite
   \   000032   7C03         MOV     R4,#0x3
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7A..         MOV     R2,#`?<Constant "Rx:">` & 0xff
   \   000038   7B..         MOV     R3,#(`?<Constant "Rx:">` >> 8) & 0xff
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   12....       LCALL   ??HalUARTWrite?relay
    407                HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //´®¿ÚÊä³ö½ÓÊÕµ½µÄÊý¾Ý
   \   00003F                ; Setup parameters for call to function HalUARTWrite
   \   00003F   EE           MOV     A,R6
   \   000040   241F         ADD     A,#0x1f
   \   000042   F582         MOV     DPL,A
   \   000044   EF           MOV     A,R7
   \   000045   3400         ADDC    A,#0x0
   \   000047   F583         MOV     DPH,A
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FC           MOV     R4,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   FD           MOV     R5,A
   \   00004E   85..82       MOV     DPL,?V0 + 0
   \   000051   85..83       MOV     DPH,?V0 + 1
   \   000054   E0           MOVX    A,@DPTR
   \   000055   FA           MOV     R2,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   FB           MOV     R3,A
   \   000059   7900         MOV     R1,#0x0
   \   00005B   12....       LCALL   ??HalUARTWrite?relay
    408                HalUARTWrite(0, "\n", 1);         // »Ø³µ»»ÐÐ
   \   00005E                ; Setup parameters for call to function HalUARTWrite
   \   00005E   7C01         MOV     R4,#0x1
   \   000060   7D00         MOV     R5,#0x0
   \   000062   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   000064   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   000066   7900         MOV     R1,#0x0
   \   000068   12....       LCALL   ??HalUARTWrite?relay
    409                break;    
   \   00006B   8037         SJMP    ??SampleApp_MessageMSGCB_0
    410              case SAMPLEAPP_PERIODIC_CLUSTERID:
    411                break;
    412          
    413              case SAMPLEAPP_FLASH_CLUSTERID:
    414                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    415                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_1:
   \   00006D   85..82       MOV     DPL,?V0 + 0
   \   000070   85..83       MOV     DPH,?V0 + 1
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F8           MOV     R0,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F9           MOV     R1,A
   \   000078                ; Setup parameters for call to function HalLedBlink
   \   000078   8882         MOV     DPL,R0
   \   00007A   8983         MOV     DPH,R1
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   FA           MOV     R2,A
   \   00007F   8882         MOV     DPL,R0
   \   000081   8983         MOV     DPH,R1
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F9           MOV     R1,A
   \   000087   EA           MOV     A,R2
   \   000088   2400         ADD     A,#0x0
   \   00008A   F5..         MOV     ?V0 + 0,A
   \   00008C   E4           CLR     A
   \   00008D   39           ADDC    A,R1
   \   00008E   F5..         MOV     ?V0 + 1,A
   \   000090   7402         MOV     A,#0x2
   \   000092   78..         MOV     R0,#?V0 + 0
   \   000094   12....       LCALL   ?US_SHR
   \   000097   AC..         MOV     R4,?V0 + 0
   \   000099   AD..         MOV     R5,?V0 + 1
   \   00009B   7B32         MOV     R3,#0x32
   \   00009D   7A04         MOV     R2,#0x4
   \   00009F   7908         MOV     R1,#0x8
   \   0000A1   12....       LCALL   ??HalLedBlink?relay
    416                break;
    417            }
    418          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000A4   02....       LJMP    ?Subroutine0 & 0xFFFF
    419          
    420          /*********************************************************************
    421           * @fn      SampleApp_SendPeriodicMessage
    422           *
    423           * @brief   Send the periodic message.
    424           *
    425           * @param   none
    426           *
    427           * @return  none
    428           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    429          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    430          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    431            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    432                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    433                                 1,
    434                                 (uint8*)&SampleAppPeriodicCounter,
    435                                 &SampleApp_TransID,
    436                                 AF_DISCV_ROUTE,
    437                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??AF_DataRequest?relay
   \   000040   7409         MOV     A,#0x9
   \   000042   02....       LJMP    ?Subroutine1 & 0xFFFF
    438            {
    439            }
    440            else
    441            {
    442              // Error occurred in request to send.
    443            }
    444          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine2_0
   \   000003                ; // Fall through to label ??Subroutine2_0
    445          
    446          /*********************************************************************
    447           * @fn      SampleApp_SendFlashMessage
    448           *
    449           * @brief   Send the flash message to group 1.
    450           *
    451           * @param   flashTime - in milliseconds
    452           *
    453           * @return  none
    454           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    455          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    456          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    457            uint8 buffer[3];
    458            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    459            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    460            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    461          
    462            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    463                                 SAMPLEAPP_FLASH_CLUSTERID,
    464                                 3,
    465                                 buffer,
    466                                 &SampleApp_TransID,
    467                                 AF_DISCV_ROUTE,
    468                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    469            {
    470            }
    471            else
    472            {
    473              // Error occurred in request to send.
    474            }
    475          }
   \   000071   7403         MOV     A,#0x3
   \   000073   80..         SJMP    ?Subroutine1
    476          
    477          /*********************************************************************
    478           * @fn      SampleApp_Send_P2P_Message
    479           *
    480           * @brief   point to point.
    481           *
    482           * @param   none
    483           *
    484           * @return  none
    485           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    486          void SampleApp_Send_P2P_Message( void )
   \                     SampleApp_Send_P2P_Message:
    487          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    488            uint8 data[11]="0123456789";
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant "0123456789">` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant "0123456789">` & 0xff
   \   00001A   740B         MOV     A,#0xb
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    489            
    490            if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    491                                 SAMPLEAPP_P2P_CLUSTERID,
    492                                 10,
    493                                 data,
    494                                 &SampleApp_TransID,
    495                                 AF_DISCV_ROUTE,
    496                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00001F                ; Setup parameters for call to function AF_DataRequest
   \   00001F   75..1E       MOV     ?V0 + 0,#0x1e
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000027   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00002A   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7403         MOV     A,#0x3
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   8582..       MOV     ?V0 + 0,DPL
   \   00003A   8583..       MOV     ?V0 + 1,DPH
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   75..0A       MOV     ?V0 + 0,#0xa
   \   000045   75..00       MOV     ?V0 + 1,#0x0
   \   000048   78..         MOV     R0,#?V0 + 0
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004D   75..04       MOV     ?V0 + 0,#0x4
   \   000050   78..         MOV     R0,#?V0 + 0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   7920         MOV     R1,#0x20
   \   000057   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000059   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00005B   7A..         MOV     R2,#SampleApp_P2P_DstAddr & 0xff
   \   00005D   7B..         MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
   \   00005F   12....       LCALL   ??AF_DataRequest?relay
   \   000062   7409         MOV     A,#0x9
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
    497            {
    498            }
    499            else
    500            {
    501              // Error occurred in request to send.
    502            }
    503          }
   \   000067   740B         MOV     A,#0xb
   \   000069                REQUIRE ?Subroutine1
   \   000069                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Rx:">`:
   \   000000   52783A00     DB "Rx:"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0123456789">`:
   \   000000   30313233     DB "0123456789"
   \            34353637
   \            383900  
    504          /*********************************************************************
    505          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     24
       -> HalUARTWrite                  0      0     24
       -> HalUARTWrite                  0      0     24
       -> HalUARTWrite                  0      0     24
       -> HalLedBlink                   0      0     24
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_Send_P2P_Message
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     19
       -> AF_DataRequest                0      0     38
     SampleApp_Send_P2P_Message         2      0     42
       -> AF_DataRequest                0      0     60


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_P2P_DstAddr                   12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         185
     SampleApp_ProcessEvent                 171
     ?Subroutine0                             5
     SampleApp_HandleKeys                    62
     ??Subroutine2_0                          5
     SampleApp_MessageMSGCB                 167
     SampleApp_SendPeriodicMessage           69
     ?Subroutine1                             3
     SampleApp_SendFlashMessage             117
     SampleApp_Send_P2P_Message             105
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant "Rx:">                        4
     ?<Constant "\n">                         2
     ?<Constant "0123456789">                11

 
 889 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
  51 bytes in segment XDATA_ROM_C
  65 bytes in segment XDATA_Z
 
 931 bytes of CODE  memory
  51 bytes of CONST memory
  65 bytes of XDATA memory

Errors: none
Warnings: none
